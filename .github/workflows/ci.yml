# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Continuous Integration

on:
  pull_request:
    branches: ['**', '!update/**', '!pr/**']
  push:
    branches: ['**', '!update/**', '!pr/**']
    tags: [v*]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-22.04]
        scala: [2.12, 2.13, 3]
        java: [temurin@11]
        project: [mulesNative, mulesJVM, mulesJS]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@11)
        id: setup-java-temurin-11
        if: matrix.java == 'temurin@11'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@11' && steps.setup-java-temurin-11.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Check that workflows are up to date
        run: sbt githubWorkflowCheck

      - name: Check headers and formatting
        if: matrix.java == 'temurin@11' && matrix.os == 'ubuntu-22.04'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' headerCheckAll scalafmtCheckAll 'project /' scalafmtSbtCheck

      - name: nativeLink
        if: matrix.project == 'mulesNative'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' Test/nativeLink

      - name: scalaJSLink
        if: matrix.project == 'mulesJS'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' Test/scalaJSLinkerResult

      - name: Test
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' test

      - name: Check binary compatibility
        if: matrix.java == 'temurin@11' && matrix.os == 'ubuntu-22.04'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' mimaReportBinaryIssues

      - name: Generate API documentation
        if: matrix.java == 'temurin@11' && matrix.os == 'ubuntu-22.04'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' doc

      - name: Make target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: mkdir -p modules/noop/.jvm/target modules/core/.native/target modules/caffeine/target modules/noop/.native/target modules/core/.js/target modules/noop/.js/target modules/core/.jvm/target modules/reload/.js/target modules/reload/.jvm/target project/target

      - name: Compress target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: tar cf targets.tar modules/noop/.jvm/target modules/core/.native/target modules/caffeine/target modules/noop/.native/target modules/core/.js/target modules/noop/.js/target modules/core/.jvm/target modules/reload/.js/target modules/reload/.jvm/target project/target

      - name: Upload target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-${{ matrix.scala }}-${{ matrix.project }}
          path: targets.tar

  publish:
    name: Publish Artifacts
    needs: [build]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@11]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@11)
        id: setup-java-temurin-11
        if: matrix.java == 'temurin@11'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@11' && steps.setup-java-temurin-11.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Download target directories (2.12, mulesNative)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.12-mulesNative

      - name: Inflate target directories (2.12, mulesNative)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (2.12, mulesJVM)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.12-mulesJVM

      - name: Inflate target directories (2.12, mulesJVM)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (2.12, mulesJS)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.12-mulesJS

      - name: Inflate target directories (2.12, mulesJS)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (2.13, mulesNative)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.13-mulesNative

      - name: Inflate target directories (2.13, mulesNative)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (2.13, mulesJVM)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.13-mulesJVM

      - name: Inflate target directories (2.13, mulesJVM)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (2.13, mulesJS)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.13-mulesJS

      - name: Inflate target directories (2.13, mulesJS)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (3, mulesNative)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-mulesNative

      - name: Inflate target directories (3, mulesNative)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (3, mulesJVM)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-mulesJVM

      - name: Inflate target directories (3, mulesJVM)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (3, mulesJS)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-mulesJS

      - name: Inflate target directories (3, mulesJS)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Import signing key
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE == ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: echo $PGP_SECRET | base64 -d -i - | gpg --import

      - name: Import signing key and strip passphrase
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
          echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
          (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

      - name: Publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_CREDENTIAL_HOST: ${{ secrets.SONATYPE_CREDENTIAL_HOST }}
        run: sbt tlCiRelease

  dependency-submission:
    name: Submit Dependencies
    if: github.event.repository.fork == false && github.event_name != 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@11]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@11)
        id: setup-java-temurin-11
        if: matrix.java == 'temurin@11'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@11' && steps.setup-java-temurin-11.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Submit Dependencies
        uses: scalacenter/sbt-dependency-submission@v2
        with:
          modules-ignore: mulesnative_2.12 mulesnative_2.13 mulesnative_3 mulesjvm_2.12 mulesjvm_2.13 mulesjvm_3 mulesjs_2.12 mulesjs_2.13 mulesjs_3 bench_2.12 bench_2.13 bench_3
          configs-ignore: test scala-tool scala-doc-tool test-internal
